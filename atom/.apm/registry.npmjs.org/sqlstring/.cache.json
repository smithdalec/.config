{"_id":"sqlstring","_rev":"8-90870dee63b7309e91259e545fad19e6","name":"sqlstring","description":"Simple SQL escape and format for MySQL","dist-tags":{"latest":"2.0.1"},"versions":{"0.0.1":{"name":"sqlstring","version":"0.0.1","description":"SQL escape and format from mysql/lib/protocol/SqlString.js","main":"index.js","scripts":{"test":"make test-all"},"config":{"blanket":{"pattern":"sqlstring/lib","data-cover-flags":{"debug":false}},"travis-cov":{"threshold":20}},"dependencies":{},"devDependencies":{"autod":"*","blanket":"*","contributors":"*","cov":"*","coveralls":"*","mocha":"*","mocha-lcov-reporter":"*","should":"3.1.2","travis-cov":"*"},"homepage":"https://github.com/fengmk2/sqlstring","repository":{"type":"git","url":"git://github.com/fengmk2/sqlstring.git","web":"https://github.com/fengmk2/sqlstring"},"bugs":{"url":"https://github.com/fengmk2/sqlstring/issues","email":"fengmk2@gmail.com"},"keywords":["sqlstring","sql","escape","sql escape"],"engines":{"node":">= 0.10.0"},"author":{"name":"fengmk2","email":"fengmk2@gmail.com","url":"http://fengmk2.github.com"},"license":"MIT","contributors":[],"_id":"sqlstring@0.0.1","dist":{"shasum":"0916399d7e7b80df3195c488aa66ea66c891f867","tarball":"https://registry.npmjs.org/sqlstring/-/sqlstring-0.0.1.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"fengmk2","email":"fengmk2@gmail.com"},"maintainers":[{"name":"fengmk2","email":"fengmk2@gmail.com"}],"directories":{}},"1.0.0":{"name":"sqlstring","version":"1.0.0","description":"SQL escape and format from mysql/lib/protocol/SqlString.js","main":"index.js","scripts":{"test":"make test-all"},"config":{"blanket":{"pattern":"sqlstring/lib","data-cover-flags":{"debug":false}},"travis-cov":{"threshold":20}},"dependencies":{},"devDependencies":{"autod":"*","blanket":"*","contributors":"*","cov":"*","coveralls":"*","mocha":"*","mocha-lcov-reporter":"*","should":"3.1.2","travis-cov":"*"},"homepage":"https://github.com/node-modules/sqlstring","repository":{"type":"git","url":"git://github.com/node-modules/sqlstring.git","web":"https://github.com/node-modules/sqlstring"},"bugs":{"url":"https://github.com/node-modules/sqlstring/issues","email":"fengmk2@gmail.com"},"keywords":["sqlstring","sql","escape","sql escape"],"engines":{"node":">= 0.8.0"},"author":{"name":"fengmk2","email":"fengmk2@gmail.com","url":"http://fengmk2.github.com"},"license":"MIT","contributors":[],"gitHead":"dc525e1fb3d2225a758749b8c41708647d50082b","_id":"sqlstring@1.0.0","_shasum":"077dd8b1cebd06d78f7eefd56b07ae5d7ccc897c","_from":".","_npmVersion":"2.0.0","_npmUser":{"name":"fengmk2","email":"fengmk2@gmail.com"},"maintainers":[{"name":"fengmk2","email":"fengmk2@gmail.com"}],"dist":{"shasum":"077dd8b1cebd06d78f7eefd56b07ae5d7ccc897c","tarball":"https://registry.npmjs.org/sqlstring/-/sqlstring-1.0.0.tgz"},"directories":{}},"2.0.0":{"name":"sqlstring","description":"Simple SQL escape and format for MySQL","version":"2.0.0","contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"},{"name":"fengmk2","email":"fengmk2@gmail.com","url":"http://fengmk2.github.com"},{"name":"Nathan Woltman","email":"nwoltman@outlook.com"}],"license":"MIT","keywords":["sqlstring","sql","escape","sql escape"],"repository":{"type":"git","url":"https://github.com/mysqljs/sqlstring"},"devDependencies":{"eslint":"2.11.1","istanbul":"0.4.3","mkdirp":"0.5.1","require-all":"2.0.0","rimraf":"2.2.8","urun":"0.0.8","utest":"0.0.8"},"files":["HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"lint":"eslint lib/**/*.js index.js test/**/*.js","test":"node test/run.js","test-ci":"node test/run-cov.js lcovonly","test-cov":"node test/run-cov.js"},"gitHead":"d1dcb4a2f9a3d2f7db03396abb5e107bfa23cb04","bugs":{"url":"https://github.com/mysqljs/sqlstring/issues"},"homepage":"https://github.com/mysqljs/sqlstring","_id":"sqlstring@2.0.0","_shasum":"49eab0454de451e385250b223aee8575d46721f8","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"fengmk2","email":"fengmk2@gmail.com"},{"name":"sidorares","email":"sidorares@yandex.com"}],"dist":{"shasum":"49eab0454de451e385250b223aee8575d46721f8","tarball":"https://registry.npmjs.org/sqlstring/-/sqlstring-2.0.0.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/sqlstring-2.0.0.tgz_1465242257476_0.07983834785409272"},"directories":{}},"2.0.1":{"name":"sqlstring","description":"Simple SQL escape and format for MySQL","version":"2.0.1","contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"},{"name":"fengmk2","email":"fengmk2@gmail.com","url":"http://fengmk2.github.com"},{"name":"Nathan Woltman","email":"nwoltman@outlook.com"}],"license":"MIT","keywords":["sqlstring","sql","escape","sql escape"],"repository":{"type":"git","url":"https://github.com/mysqljs/sqlstring"},"devDependencies":{"eslint":"2.11.1","istanbul":"0.4.3","mkdirp":"0.5.1","require-all":"2.0.0","rimraf":"2.2.8","urun":"0.0.8","utest":"0.0.8"},"files":["lib/","HISTORY.md","LICENSE","README.md","index.js"],"engines":{"node":">= 0.6"},"scripts":{"lint":"eslint lib/**/*.js index.js test/**/*.js","test":"node test/run.js","test-ci":"node test/run-cov.js lcovonly","test-cov":"node test/run-cov.js"},"gitHead":"b7e11a5bfdfa1da198e32a046d6dcfaf04e141dc","bugs":{"url":"https://github.com/mysqljs/sqlstring/issues"},"homepage":"https://github.com/mysqljs/sqlstring","_id":"sqlstring@2.0.1","_shasum":"bcd3c3931af1a5ab7d54a558eb3563ca3d378b98","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"dougwilson","email":"doug@somethingdoug.com"},"maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"fengmk2","email":"fengmk2@gmail.com"},{"name":"sidorares","email":"sidorares@yandex.com"}],"dist":{"shasum":"bcd3c3931af1a5ab7d54a558eb3563ca3d378b98","tarball":"https://registry.npmjs.org/sqlstring/-/sqlstring-2.0.1.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/sqlstring-2.0.1.tgz_1465242438154_0.3652630455326289"},"directories":{}}},"readme":"# sqlstring\n\n[![NPM Version][npm-version-image]][npm-url]\n[![NPM Downloads][npm-downloads-image]][npm-url]\n[![Node.js Version][node-image]][node-url]\n[![Build Status][travis-image]][travis-url]\n[![Coverage Status][coveralls-image]][coveralls-url]\n\nSimple SQL escape and format for MySQL\n\n## Install\n\n```bash\n$ npm install sqlstring\n```\n\n## Usage\n\n```js\nvar SqlString = require('sqlstring');\n```\n\n### Escaping query values\n\nIn order to avoid SQL Injection attacks, you should always escape any user\nprovided data before using it inside a SQL query. You can do so using the\n`SqlString.escape()` method:\n\n```js\nvar userId = 'some user provided value';\nvar sql    = 'SELECT * FROM users WHERE id = ' + SqlString.escape(userId);\n```\n\nAlternatively, you can use `?` characters as placeholders for values you would\nlike to have escaped like this:\n\n```js\nvar sql = SqlString.format('SELECT * FROM users WHERE id = ?', [userId]);\n```\n\nMultiple placeholders are mapped to values in the same order as passed. For example,\nin the following query `foo` equals `a`, `bar` equals `b`, `baz` equals `c`, and\n`id` will be `userId`:\n\n```js\nvar sql = SqlString.format('UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?', ['a', 'b', 'c', userId]);\n```\n\nThis looks similar to prepared statements in MySQL, however it really just uses\nthe same `SqlString.escape()` method internally.\n\n**Caution** This also differs from prepared statements in that all `?` are\nreplaced, even those contained in comments and strings.\n\nDifferent value types are escaped differently, here is how:\n\n* Numbers are left untouched\n* Booleans are converted to `true` / `false`\n* Date objects are converted to `'YYYY-mm-dd HH:ii:ss'` strings\n* Buffers are converted to hex strings, e.g. `X'0fa5'`\n* Strings are safely escaped\n* Arrays are turned into list, e.g. `['a', 'b']` turns into `'a', 'b'`\n* Nested arrays are turned into grouped lists (for bulk inserts), e.g. `[['a',\n  'b'], ['c', 'd']]` turns into `('a', 'b'), ('c', 'd')`\n* Objects are turned into `key = 'val'` pairs for each enumerable property on\n  the object. If the property's value is a function, it is skipped; if the\n  property's value is an object, toString() is called on it and the returned\n  value is used.\n* `undefined` / `null` are converted to `NULL`\n* `NaN` / `Infinity` are left as-is. MySQL does not support these, and trying\n  to insert them as values will trigger MySQL errors until they implement\n  support.\n\nIf you paid attention, you may have noticed that this escaping allows you\nto do neat things like this:\n\n```js\nvar post  = {id: 1, title: 'Hello MySQL'};\nvar sql = SqlString.query('INSERT INTO posts SET ?', post);\nconsole.log(sql); // INSERT INTO posts SET `id` = 1, `title` = 'Hello MySQL'\n```\n\nIf you feel the need to escape queries by yourself, you can also use the escaping\nfunction directly:\n\n```js\nvar sql = 'SELECT * FROM posts WHERE title=' + SqlString.escape(\"Hello MySQL\");\nconsole.log(sql); // SELECT * FROM posts WHERE title='Hello MySQL'\n```\n\n### Escaping query identifiers\n\nIf you can't trust an SQL identifier (database / table / column name) because it is\nprovided by a user, you should escape it with `SqlString.escapeId(identifier)` like this:\n\n```js\nvar sorter = 'date';\nvar sql    = 'SELECT * FROM posts ORDER BY ' + SqlString.escapeId(sorter);\n```\n\nIt also supports adding qualified identifiers. It will escape both parts.\n\n```js\nvar sorter = 'date';\nvar sql    = 'SELECT * FROM posts ORDER BY ' + SqlString.escapeId('posts.' + sorter);\n```\n\nAlternatively, you can use `??` characters as placeholders for identifiers you would\nlike to have escaped like this:\n\n```js\nvar userId = 1;\nvar columns = ['username', 'email'];\nvar sql     = SqlString.query('SELECT ?? FROM ?? WHERE id = ?', [columns, 'users', userId]);\nconsole.log(sql); // SELECT `username`, `email` FROM `users` WHERE id = 1\n```\n**Please note that this last character sequence is experimental and syntax might change**\n\nWhen you pass an Object to `.escape()` or `.query()`, `.escapeId()` is used to avoid SQL injection in object keys.\n\n### Formatting queries\n\nYou can use `SqlString.format` to prepare a query with multiple insertion points,\nutilizing the proper escaping for ids and values. A simple example of this follows:\n\n```js\nvar inserts = ['users', 'id', userId];\nvar sql     = SqlString.format('SELECT * FROM ?? WHERE ?? = ?', inserts);\n```\n\nFollowing this you then have a valid, escaped query that you can then send to the database safely.\nThis is useful if you are looking to prepare the query before actually sending it to the database.\nYou also have the option (but are not required) to pass in `stringifyObject` and `timeZone`,\nallowing you provide a custom means of turning objects into strings, as well as a\nlocation-specific/timezone-aware `Date`.\n\n## License\n\n[MIT](LICENSE)\n\n[npm-version-image]: https://img.shields.io/npm/v/sqlstring.svg\n[npm-downloads-image]: https://img.shields.io/npm/dm/sqlstring.svg\n[npm-url]: https://npmjs.org/package/sqlstring\n[travis-image]: https://img.shields.io/travis/mysqljs/sqlstring/master.svg\n[travis-url]: https://travis-ci.org/mysqljs/sqlstring\n[coveralls-image]: https://img.shields.io/coveralls/mysqljs/sqlstring/master.svg\n[coveralls-url]: https://coveralls.io/r/mysqljs/sqlstring?branch=master\n[node-image]: https://img.shields.io/node/v/sqlstring.svg\n[node-url]: https://nodejs.org/en/download\n","maintainers":[{"name":"dougwilson","email":"doug@somethingdoug.com"},{"name":"fengmk2","email":"fengmk2@gmail.com"},{"name":"sidorares","email":"sidorares@yandex.com"}],"time":{"modified":"2016-06-06T19:47:19.886Z","created":"2014-02-25T03:44:04.681Z","0.0.1":"2014-02-25T03:44:04.681Z","1.0.0":"2014-11-09T09:40:14.414Z","2.0.0":"2016-06-06T19:44:19.336Z","2.0.1":"2016-06-06T19:47:19.886Z"},"homepage":"https://github.com/mysqljs/sqlstring","keywords":["sqlstring","sql","escape","sql escape"],"repository":{"type":"git","url":"https://github.com/mysqljs/sqlstring"},"contributors":[{"name":"Douglas Christopher Wilson","email":"doug@somethingdoug.com"},{"name":"fengmk2","email":"fengmk2@gmail.com","url":"http://fengmk2.github.com"},{"name":"Nathan Woltman","email":"nwoltman@outlook.com"}],"bugs":{"url":"https://github.com/mysqljs/sqlstring/issues"},"license":"MIT","readmeFilename":"README.md","_attachments":{},"_etag":"\"BCUK5MUV3AT521PS5IGC9X8UR\""}
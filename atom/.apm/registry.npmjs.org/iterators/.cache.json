{"_id":"iterators","_rev":"15-5c25da33a226a213781d02c0120163ed","name":"iterators","description":"iterate over collections in sync & async","dist-tags":{"latest":"0.3.3"},"versions":{"0.1.0":{"name":"iterators","version":"0.1.0","description":"iterate over collections in sync & async","keywords":[],"author":{"name":"Raynos","email":"raynos2@gmail.com"},"repository":{"type":"git","url":"git://github.com/Raynos/iterators.git"},"main":"index","homepage":"https://github.com/Raynos/iterators","contributors":[{"name":"Jake Verbaten"}],"bugs":{"url":"https://github.com/Raynos/iterators/issues","email":"raynos2@gmail.com"},"devDependencies":{"testling":"git://github.com/Raynos/testling#implement-render","testem":"git://github.com/Raynos/testem#master","sinon":"git://github.com/Raynos/Sinon.JS.git","tap":"0.2.5"},"licenses":[{"type":"MIT","url":"http://github.com/raynos/iterators/raw/master/LICENSE"}],"scripts":{"test":"make node-test"},"dependencies":{"ap":"~0.1.0"},"readme":"# Iterators [![build status][1]][2]\n\nIterate over collections in sync or async\n\n## Example\n\n    var iterators = require(\"iterators\")\n        , map = iterators.map\n        , fs = require(\"fs\")\n        , readFile = fs.readFile\n\n    map({\n        \"foo\": \"test/foo.js\"\n        , \"bar\": \"test/bar.js\"\n    }, readFile, function (err, files) {\n        // files.foo, files.bar\n    })\n\n## Motivation\n\nThere are a few minor issues with the iterators on Array.prototype and alternatives provided by underscore / async.\n\nThis library fixes the following nitpicks:\n\n - You can call an iterator on both an array and an object\n - every / some return the truthy / falsey value without coercing to a boolean\n - reduce / reduceRight accept a optional thisValue\n - provides asynchronous implementations of all iterators that use a \n    callback<Error, Value> instead of returning the value\n\n## Installation\n\n`npm install composite`\n\n## Tests\n\n`make test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/iterators.png\n  [2]: http://travis-ci.org/Raynos/iterators \n  [3]: https://github.com/Raynos/iterators/tree/master/test","_id":"iterators@0.1.0","dist":{"shasum":"d03f666ca4e6130138565997cacea54164203156","tarball":"https://registry.npmjs.org/iterators/-/iterators-0.1.0.tgz"},"maintainers":[{"name":"raynos","email":"raynos2@gmail.com"}],"directories":{}},"0.2.0":{"name":"iterators","version":"0.2.0","description":"iterate over collections in sync & async","keywords":[],"author":{"name":"Raynos","email":"raynos2@gmail.com"},"repository":{"type":"git","url":"git://github.com/Raynos/iterators.git"},"main":"index","homepage":"https://github.com/Raynos/iterators","contributors":[{"name":"Jake Verbaten"}],"bugs":{"url":"https://github.com/Raynos/iterators/issues","email":"raynos2@gmail.com"},"devDependencies":{"testling":"git://github.com/Raynos/testling#implement-render","testem":"git://github.com/Raynos/testem#master","sinon":"git://github.com/Raynos/Sinon.JS.git","tap":"0.2.5"},"licenses":[{"type":"MIT","url":"http://github.com/raynos/iterators/raw/master/LICENSE"}],"scripts":{"test":"make node-test"},"dependencies":{"ap":"~0.1.0"},"readme":"# Iterators [![build status][1]][2]\n\nIterate over collections in sync or async\n\n## Example\n\n    var iterators = require(\"iterators\")\n        , map = iterators.map\n        , fs = require(\"fs\")\n        , readFile = fs.readFile\n\n    map({\n        \"foo\": \"test/foo.js\"\n        , \"bar\": \"test/bar.js\"\n    }, readFile, function (err, files) {\n        // files.foo, files.bar\n    })\n\n## Motivation\n\nThere are a few minor issues with the iterators on Array.prototype and alternatives provided by underscore / async.\n\nThis library fixes the following nitpicks:\n\n - You can call an iterator on both an array and an object\n - every / some return the truthy / falsey value without coercing to a boolean\n - reduce / reduceRight accept a optional thisValue\n - provides asynchronous implementations of all iterators that use a \n    callback<Error, Value> instead of returning the value\n\n## Installation\n\n`npm install composite`\n\n## Tests\n\n`make test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/iterators.png\n  [2]: http://travis-ci.org/Raynos/iterators \n  [3]: https://github.com/Raynos/iterators/tree/master/test","_id":"iterators@0.2.0","dist":{"shasum":"f62720e05ee361e1d9666d93b91a15288ef68c2b","tarball":"https://registry.npmjs.org/iterators/-/iterators-0.2.0.tgz"},"maintainers":[{"name":"raynos","email":"raynos2@gmail.com"}],"directories":{}},"0.3.0":{"name":"iterators","version":"0.3.0","description":"iterate over collections in sync & async","keywords":[],"author":{"name":"Raynos","email":"raynos2@gmail.com"},"repository":{"type":"git","url":"git://github.com/Raynos/iterators.git"},"main":"index","homepage":"https://github.com/Raynos/iterators","contributors":[{"name":"Jake Verbaten"}],"bugs":{"url":"https://github.com/Raynos/iterators/issues","email":"raynos2@gmail.com"},"devDependencies":{"testling":"git://github.com/Raynos/testling#implement-render","testem":"git://github.com/Raynos/testem#master","sinon":"git://github.com/Raynos/Sinon.JS.git","tap":"0.2.5"},"licenses":[{"type":"MIT","url":"http://github.com/raynos/iterators/raw/master/LICENSE"}],"scripts":{"test":"make node-test"},"dependencies":{"ap":"~0.1.0"},"readme":"# Iterators [![build status][1]][2]\n\nIterate over collections in sync or async\n\n## Example\n\n    var iterators = require(\"iterators\")\n        , map = iterators.map\n        , fs = require(\"fs\")\n        , readFile = fs.readFile\n\n    map({\n        \"foo\": \"test/foo.js\"\n        , \"bar\": \"test/bar.js\"\n    }, readFile, function (err, files) {\n        // files.foo, files.bar\n    })\n\n## Motivation\n\nThere are a few minor issues with the iterators on Array.prototype and alternatives provided by underscore / async.\n\nThis library fixes the following nitpicks:\n\n - You can call an iterator on both an array and an object\n - every / some return the truthy / falsey value without coercing to a boolean\n - reduce / reduceRight accept a optional thisValue\n - provides asynchronous implementations of all iterators that use a \n    callback<Error, Value> instead of returning the value\n\n## Installation\n\n`npm install composite`\n\n## Tests\n\n`make test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/iterators.png\n  [2]: http://travis-ci.org/Raynos/iterators \n  [3]: https://github.com/Raynos/iterators/tree/master/test","_id":"iterators@0.3.0","dist":{"shasum":"8368a38c67b4ff7101c4a13acb4950ea7e0ba74e","tarball":"https://registry.npmjs.org/iterators/-/iterators-0.3.0.tgz"},"_npmVersion":"1.1.49","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"raynos","email":"raynos2@gmail.com"}],"directories":{}},"0.3.1":{"name":"iterators","version":"0.3.1","description":"iterate over collections in sync & async","keywords":[],"author":{"name":"Raynos","email":"raynos2@gmail.com"},"repository":{"type":"git","url":"git://github.com/Raynos/iterators.git"},"main":"index","homepage":"https://github.com/Raynos/iterators","contributors":[{"name":"Jake Verbaten"}],"bugs":{"url":"https://github.com/Raynos/iterators/issues","email":"raynos2@gmail.com"},"devDependencies":{"testling":"git://github.com/Raynos/testling#implement-render","testem":"git://github.com/Raynos/testem#master","sinon":"git://github.com/Raynos/Sinon.JS.git","tap":"0.2.5"},"licenses":[{"type":"MIT","url":"http://github.com/raynos/iterators/raw/master/LICENSE"}],"scripts":{"test":"make node-test"},"dependencies":{"ap":"git://github.com/Raynos/node-ap"},"readme":"# Iterators [![build status][1]][2]\n\nIterate over collections in sync or async\n\n## Example\n\n    var iterators = require(\"iterators\")\n        , map = iterators.map\n        , fs = require(\"fs\")\n        , readFile = fs.readFile\n\n    map({\n        \"foo\": \"test/foo.js\"\n        , \"bar\": \"test/bar.js\"\n    }, readFile, function (err, files) {\n        // files.foo, files.bar\n    })\n\n## Motivation\n\nThere are a few minor issues with the iterators on Array.prototype and alternatives provided by underscore / async.\n\nThis library fixes the following nitpicks:\n\n - You can call an iterator on both an array and an object\n - every / some return the truthy / falsey value without coercing to a boolean\n - reduce / reduceRight accept a optional thisValue\n - provides asynchronous implementations of all iterators that use a \n    callback<Error, Value> instead of returning the value\n\n## Installation\n\n`npm install composite`\n\n## Tests\n\n`make test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/iterators.png\n  [2]: http://travis-ci.org/Raynos/iterators \n  [3]: https://github.com/Raynos/iterators/tree/master/test","_id":"iterators@0.3.1","dist":{"shasum":"41441525673b7f66e9d852bf1b3a8cea8a95ac98","tarball":"https://registry.npmjs.org/iterators/-/iterators-0.3.1.tgz"},"_npmVersion":"1.1.49","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"raynos","email":"raynos2@gmail.com"}],"directories":{}},"1.0.0":{"name":"iterators","version":"1.0.0","description":"iterate over collections in sync & async","keywords":[],"author":{"name":"Raynos","email":"raynos2@gmail.com"},"repository":{"type":"git","url":"git://github.com/Raynos/iterators.git"},"main":"index","homepage":"https://github.com/Raynos/iterators","contributors":[{"name":"Jake Verbaten"}],"bugs":{"url":"https://github.com/Raynos/iterators/issues","email":"raynos2@gmail.com"},"devDependencies":{"testling":"git://github.com/Raynos/testling#implement-render","testem":"git://github.com/Raynos/testem#master","sinon":"git://github.com/Raynos/Sinon.JS.git","tap":"0.2.5"},"licenses":[{"type":"MIT","url":"http://github.com/raynos/iterators/raw/master/LICENSE"}],"scripts":{"test":"make node-test"},"dependencies":{"ap":"git://github.com/Raynos/node-ap","xtend":"~1.0.3","to-array":"~0.1.3"},"readme":"# Iterators [![build status][1]][2]\n\nIterate over collections in sync or async\n\n## Example\n\n    var iterators = require(\"iterators\")\n        , map = iterators.map\n        , fs = require(\"fs\")\n        , readFile = fs.readFile\n\n    map({\n        \"foo\": \"test/foo.js\"\n        , \"bar\": \"test/bar.js\"\n    }, readFile, function (err, files) {\n        // files.foo, files.bar\n    })\n\n## Motivation\n\nThere are a few minor issues with the iterators on Array.prototype and alternatives provided by underscore / async.\n\nThis library fixes the following nitpicks:\n\n - You can call an iterator on both an array and an object\n - every / some return the truthy / falsey value without coercing to a boolean\n - reduce / reduceRight accept a optional thisValue\n - provides asynchronous implementations of all iterators that use a \n    callback<Error, Value> instead of returning the value\n\n## Installation\n\n`npm install composite`\n\n## Tests\n\n`make test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/iterators.png\n  [2]: http://travis-ci.org/Raynos/iterators \n  [3]: https://github.com/Raynos/iterators/tree/master/test","_id":"iterators@1.0.0","dist":{"shasum":"19434930ad5e6a78570742c458ed8643a7a2d55e","tarball":"https://registry.npmjs.org/iterators/-/iterators-1.0.0.tgz"},"_npmVersion":"1.1.49","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"raynos","email":"raynos2@gmail.com"}],"directories":{}},"0.3.2":{"name":"iterators","version":"0.3.2","description":"iterate over collections in sync & async","keywords":[],"author":{"name":"Raynos","email":"raynos2@gmail.com"},"repository":{"type":"git","url":"git://github.com/Raynos/iterators.git"},"main":"index","homepage":"https://github.com/Raynos/iterators","contributors":[{"name":"Jake Verbaten"}],"bugs":{"url":"https://github.com/Raynos/iterators/issues","email":"raynos2@gmail.com"},"devDependencies":{"testling":"git://github.com/Raynos/testling#implement-render","testem":"git://github.com/Raynos/testem#master","sinon":"git://github.com/Raynos/Sinon.JS.git","tap":"0.2.5"},"licenses":[{"type":"MIT","url":"http://github.com/raynos/iterators/raw/master/LICENSE"}],"scripts":{"test":"make node-test"},"dependencies":{"ap":"git://github.com/Raynos/node-ap"},"readme":"# Iterators [![build status][1]][2]\n\nIterate over collections in sync or async\n\n## Example\n\n    var iterators = require(\"iterators\")\n        , map = iterators.map\n        , fs = require(\"fs\")\n        , readFile = fs.readFile\n\n    map({\n        \"foo\": \"test/foo.js\"\n        , \"bar\": \"test/bar.js\"\n    }, readFile, function (err, files) {\n        // files.foo, files.bar\n    })\n\n## Motivation\n\nThere are a few minor issues with the iterators on Array.prototype and alternatives provided by underscore / async.\n\nThis library fixes the following nitpicks:\n\n - You can call an iterator on both an array and an object\n - every / some return the truthy / falsey value without coercing to a boolean\n - reduce / reduceRight accept a optional thisValue\n - provides asynchronous implementations of all iterators that use a \n    callback<Error, Value> instead of returning the value\n\n## Installation\n\n`npm install composite`\n\n## Tests\n\n`make test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/iterators.png\n  [2]: http://travis-ci.org/Raynos/iterators \n  [3]: https://github.com/Raynos/iterators/tree/master/test","_id":"iterators@0.3.2","dist":{"shasum":"b5d0abbe938a0267605b0f37036e44149632f919","tarball":"https://registry.npmjs.org/iterators/-/iterators-0.3.2.tgz"},"_npmVersion":"1.1.49","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"raynos","email":"raynos2@gmail.com"}],"directories":{}},"0.3.3":{"name":"iterators","version":"0.3.3","description":"iterate over collections in sync & async","keywords":[],"author":{"name":"Raynos","email":"raynos2@gmail.com"},"repository":{"type":"git","url":"git://github.com/Raynos/iterators.git"},"main":"index","homepage":"https://github.com/Raynos/iterators","contributors":[{"name":"Jake Verbaten"}],"bugs":{"url":"https://github.com/Raynos/iterators/issues","email":"raynos2@gmail.com"},"devDependencies":{"testling":"git://github.com/Raynos/testling#implement-render","testem":"git://github.com/Raynos/testem#master","sinon":"git://github.com/Raynos/Sinon.JS.git","tap":"0.2.5"},"licenses":[{"type":"MIT","url":"http://github.com/raynos/iterators/raw/master/LICENSE"}],"scripts":{"test":"make node-test"},"dependencies":{"ap":"git://github.com/Raynos/node-ap"},"readme":"# Iterators [![build status][1]][2]\n\nIterate over collections in sync or async\n\n## Example\n\n    var iterators = require(\"iterators\")\n        , map = iterators.map\n        , fs = require(\"fs\")\n        , readFile = fs.readFile\n\n    map({\n        \"foo\": \"test/foo.js\"\n        , \"bar\": \"test/bar.js\"\n    }, readFile, function (err, files) {\n        // files.foo, files.bar\n    })\n\n## Motivation\n\nThere are a few minor issues with the iterators on Array.prototype and alternatives provided by underscore / async.\n\nThis library fixes the following nitpicks:\n\n - You can call an iterator on both an array and an object\n - every / some return the truthy / falsey value without coercing to a boolean\n - reduce / reduceRight accept a optional thisValue\n - provides asynchronous implementations of all iterators that use a \n    callback<Error, Value> instead of returning the value\n\n## Installation\n\n`npm install composite`\n\n## Tests\n\n`make test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/iterators.png\n  [2]: http://travis-ci.org/Raynos/iterators \n  [3]: https://github.com/Raynos/iterators/tree/master/test","_id":"iterators@0.3.3","dist":{"shasum":"1d614a8195038e542eaa28952135134928c70248","tarball":"https://registry.npmjs.org/iterators/-/iterators-0.3.3.tgz"},"_npmVersion":"1.1.49","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"raynos","email":"raynos2@gmail.com"}],"directories":{}}},"readme":"# Iterators [![build status][1]][2]\n\nIterate over collections in sync or async\n\n## Example\n\n    var iterators = require(\"iterators\")\n        , map = iterators.map\n        , fs = require(\"fs\")\n        , readFile = fs.readFile\n\n    map({\n        \"foo\": \"test/foo.js\"\n        , \"bar\": \"test/bar.js\"\n    }, readFile, function (err, files) {\n        // files.foo, files.bar\n    })\n\n## Motivation\n\nThere are a few minor issues with the iterators on Array.prototype and alternatives provided by underscore / async.\n\nThis library fixes the following nitpicks:\n\n - You can call an iterator on both an array and an object\n - every / some return the truthy / falsey value without coercing to a boolean\n - reduce / reduceRight accept a optional thisValue\n - provides asynchronous implementations of all iterators that use a \n    callback<Error, Value> instead of returning the value\n\n## Installation\n\n`npm install composite`\n\n## Tests\n\n`make test`\n\n## Contributors\n\n - Raynos\n\n## MIT Licenced\n\n  [1]: https://secure.travis-ci.org/Raynos/iterators.png\n  [2]: http://travis-ci.org/Raynos/iterators \n  [3]: https://github.com/Raynos/iterators/tree/master/test","maintainers":[{"name":"raynos","email":"raynos2@gmail.com"}],"time":{"modified":"2012-11-15T19:42:57.688Z","created":"2012-07-15T05:58:08.475Z","0.1.0":"2012-07-15T05:58:10.947Z","0.2.0":"2012-08-16T22:14:50.074Z","0.3.0":"2012-08-22T21:43:11.826Z","0.3.1":"2012-10-10T20:55:41.662Z","1.0.0":"2012-10-20T23:45:46.895Z","0.3.2":"2012-11-15T19:31:23.497Z","0.3.3":"2012-11-15T19:42:57.688Z"},"author":{"name":"Raynos","email":"raynos2@gmail.com"},"repository":{"type":"git","url":"git://github.com/Raynos/iterators.git"},"_attachments":{},"_etag":"\"1K9ATWA3FPZRQNOL5T3KOIIKB\""}